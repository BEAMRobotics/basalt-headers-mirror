image: vladyslavusenko/b_image:latest

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  BUILD_TYPE: Release

# template for docker builds with ccache
.prepare_docker_template: &prepare_docker_definition
  tags:
    - docker
  before_script:
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
  cache:
    paths:
    - ccache/
    key: ${CACHE_KEY}

# template for secondary build & unit test configurations
.compile_and_test_template: &compile_and_test_definition
  stage: build
  script:
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
    - make -j4
    - ctest

# main build with benchmark and coverage
bionic-release-compile:
  <<: *prepare_docker_definition
  stage: build
  variables:
    CACHE_KEY: bionic-release
  script:
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
    - make -j4
    - ctest
    - ./test/benchmark_camera > ../benchmark_camera.txt
    - cd ../
    - mkdir build_coverage
    - cd build_coverage
    - cmake .. -DCMAKE_BUILD_TYPE=Coverage
    - make -j4
    - ctest
    - lcov --directory . --capture --output-file coverage.info
    - lcov --remove coverage.info '*test/*' '/usr/*' '*thirdparty*' '*googletest*' --output-file coverage.info
    - lcov --list coverage.info
  artifacts:
    paths:
    - benchmark_camera.txt

bionic-debug-compile:
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition
  variables:
    BUILD_TYPE: Debug
    CACHE_KEY:  bionic-debug

bionic-relwithdebinfo-compile:
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition
  variables:
    BUILD_TYPE: RelWithDebInfo
    CACHE_KEY:  bionic-relwithdebinfo

xenial-release-compile:
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition
  image: vladyslavusenko/b_image_xenial:latest
  variables:
    CACHE_KEY:  xenial-release

elcapitan-relwithdebinfo-compile:
  <<: *compile_and_test_definition
  tags: [macos, "10.11"]
  variables:
    BUILD_TYPE: RelWithDebInfo

# check if clang-format would make any changes
clang-format:
  tags:
    - docker
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: none
  script:
    - ./scripts/clang-format-all.sh
    # check if any files are now modified and error if yes
    - (if git diff --name-only --diff-filter=M | grep '\..pp$'; then echo $'\n    Some files are not properly formatted. You can use "./scripts/clang-format-all.sh".\n'; git diff --diff-filter=M; false; fi)
